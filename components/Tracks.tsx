"use client"; // Directiva necesaria para usar hooks de estado en Next.js App Router

import React, { useState } from 'react';
import TrackModal from './TrackModal'; // Importamos el nuevo componente modal

// Estructura de datos ampliada con los detalles de los documentos
const tracksData = [
  {
    title: "Checador Inteligente",
    company: "ITLAC",
    description: "Automatiza el registro de la asistencia del personal con una app m√≥vil usando geolocalizaci√≥n, eliminando la necesidad de un reloj checador f√≠sico.",
    icon: "üì±",
    details: {
      objetivo: "Que el proceso de checada de entrada y salida del personal sea un proceso automatizado, mediante una aplicaci√≥n que haga uso de las nuevas tecnolog√≠as, no se dependa de un reloj checador.",
      especificaciones: [
        "Utilizar un dispositivo m√≥vil en el cual, mediante una aplicaci√≥n, el personal registre su asistencia.",
        "La aplicaci√≥n debe de conectar con la base de datos del SII, y su horario actual.",
        "Se registe su asistencia tomando en cuenta su geolocalizaci√≥n.",
        "Si no esta dentro de la red o dentro del √°rea del ITLAC no se le permita checar."
      ],
      solucion: "Soluci√≥n innovadora que mejor el proceso del registro de checadas y salidas, control de asistencia de una instituci√≥n o empresas, con esto se evita de contar con checadores por √°reas que requieren inversi√≥n y adecuaci√≥n de instalaciones o vandalismo.",
      motivacion: "En la actualidad los relojes checadores digitales con tecnolog√≠a biom√©trica se tiene que conectar a la energ√≠a el√©ctrica, y a la red cableada, en circunstancia en donde no exista energ√≠a en el √°rea donde esta el checador o la red presente falla, no se puede realizar el registro de la entrada o salida, o se tiene que recurrir al proceso antiguo que es anotarse en una libreta que luego se extrav√≠a o no se registra adecuamente.",
      entregables: [
        "Fase 1: Conceptualizaci√≥n de la idea y justificaci√≥n de la soluci√≥n.",
        "Fase 2: Prototipo de la soluci√≥n, demostrar como se registrara y tomara la geolocalizaci√≥n del dispositivo, o como se tomara la ubicaci√≥n de la persona en la instalaci√≥n.",
        "Fase 3: Presentaci√≥n de la solucion."
      ],
      recursos: ["Actualmente ya se cuenta con la infraestructura de red, y las nuevas tecnolog√≠as para dar soluci√≥n a la problem√°tica."],
      evaluacion: ["Se evalua la propuesta de soluci√≥n, asi como la innovaci√≥n de la soluci√≥n y que tan f√°cil seria la implementaci√≥n."]
    }
  },
  {
    title: "Bona Pizza Experience",
    company: "Bona Pizza",
    description: "Optimiza la atenci√≥n a clientes en el restaurante. Crea una app para que los clientes ordenen, pidan la cuenta y m√°s desde su mesa.",
    icon: "üçï",
    details: {
      objetivo: "Obtimizacion de los tiempos de atenci√≥n de meseros a comensales del restaurante BONA PIZZA mediante el uso de dispositivos m√≥viles.",
      especificaciones: ["Se puede utilizar herramientas para desarrollo de aplicaciones m√≥viles, que funcione en por lo menos con Sistemas Operativos Android."],
      solucion: "Soluciones que mejoren el proceso de atenci√≥n existente de parte de los meseros a las peticiones de los comensales.",
      motivacion: "El objetivo de este proyecto es eficientar el proceso de atenci√≥n de los meseros a las peticiones de los comensales. Problem√°tica: Las peticiones mas comunes que hacen los comensales son: Pedir: El Men√∫, la cuenta, servilletas, cubiertos, salsas, retirar platos, limpiar la mesa. Actualmente cuando un comensal llega al restaurante, se enfrenta con las siguientes complicaciones con la atenci√≥n del mesero: Esperar a que un mesero lo vea o lo escuche para ser atendido, lo cual en algunas ocasiones se complica si hay muchos comensales, si el restaurante es grande o si hay pocos meseros atendiendo. Cuando el mesero lo ve, tiene que desplazarse a la mesa para ver que necesita el comensal, lo que implica mas tiempo para atender la solicitud del comensal. En ocasiones los comensales al ver que no hay una eficiente atenci√≥n de los meseros, prefieren desistir de la petici√≥n a tener que esperar a que un mesero los vea y llegue a su mesa para ser atendido.",
      entregables: [
          "Fase 1: Idea de soluci√≥n, Maqueta de la APP propuestas.",
          "Fase 2: EDT, Estructura de los datos almacenados en: Bases de Datos Relacional y/o NoSQL.",
          "Fase 3: Entrega de prototipo con funcionalidades b√°sicas."
      ],
      recursos: [
          "Computadora de escritorio.",
          "Smart phone para meseros y encargados.",
          "Red de √°rea local al√°mbrica e inal√°mbrica.",
          "Servicio de internet de 100 mbps."
      ],
      evaluacion: [
          "Creatividad en el uso de la tecnolog√≠a (que tecnolog√≠a ocup√≥ para la resoluci√≥n del problema).",
          "Viabilidad de implementaci√≥n (ver que la propuesta de soluci√≥n sea tecnol√≥gica y econ√≥micamente viable ).",
          "Funcionalidad del prototipo (que el proyecto contemple todas las funcionalidades solicitadas)."
      ]
    }
  },
  {
    title: "Reconocimiento de n√∫meros de corredores (BIB)",
    company: "ITLAC",
    description: "Implementa un sistema que registre el n√∫mero de un corredor para el registro de los tiempos y premiaci√≥n por categorias.",
    icon: "üèÉ‚Äç‚ôÇÔ∏è",
  },
];

const Tracks: React.FC = () => {
  // Estado para manejar el track seleccionado y la visibilidad del modal
  const [selectedTrack, setSelectedTrack] = useState<typeof tracksData[0] | null>(null);

  // Funci√≥n para abrir el modal con los datos del track seleccionado
  const handleOpenModal = (track: typeof tracksData[0]) => {
    if (track.details) { // Solo abre el modal si el track tiene detalles
      setSelectedTrack(track);
    }
  };

  // Funci√≥n para cerrar el modal
  const handleCloseModal = () => {
    setSelectedTrack(null);
  };

  return (
    <>
      <section id="tracks" className="section-padding bg-[#111]">
        <div className="container mx-auto">
          <h2 className="section-title">Track's</h2>
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
            {tracksData.map((track) => (
              <div 
                key={track.title} 
                className="bg-[#1a1a1a] p-8 rounded-xl border border-gray-800 card-hover-effect text-center flex flex-col items-center h-full cursor-pointer"
                onClick={() => handleOpenModal(track)} // Agregamos el evento onClick
              >
                <div className="text-5xl mb-5">{track.icon}</div>
                <h3 className="text-xl font-bold mb-2">{track.title}</h3>
                <p className="font-semibold text-cyan-500 mb-4 text-sm">{track.company}</p>
                <p className="text-gray-400 flex-grow">{track.description}</p>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Renderizamos el modal y le pasamos los datos y la funci√≥n de cierre */}
      <TrackModal track={selectedTrack} onClose={handleCloseModal} />
    </>
  );
};

export default Tracks;